jenkins:
  systemMessage: "Jenkins сконфигурирован автоматически при помощи JCasC."

  # Security Realm for user authentication
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          password: "admin"

        - id: "developer"
          password: "developer"

        - id: "viewer"
          password: "viewer"

  # Authorization Strategy
  authorizationStrategy:
    projectMatrix:
      entries:
        - user:
            name: admin
            permissions:
              - Overall/Administer
        - user:
            name: developer
            permissions:
              - Overall/Read
              - Job/Build
        - user:
            name: viewer
            permissions:
              - Overall/Read

# Tool Configuration
tool:
  git:
    installations:
      - name: "Default"
        home: "/usr/bin/git"
  maven:
    installations:
      - name: maven3
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.8.4"

# Sample Job Configuration
jobs:
  - script: >
      pipelineJob('Template DevSecOps pipeline') {
        parameters {
          stringParam('REPO_URL', 'https://github.com/Contrast-Security-OSS/vulnpy', 'URL репозитория для клонирования')
          stringParam('BRANCH_NAME', 'master', 'Ветка для клонирования')
        }
        definition {
          cps {
            script(''' 
                pipeline {
                    agent any
                    stages {
                        stage('Checkout') {
                            steps {
                                checkout([$class: 'GitSCM', 
                                          branches: [[name: "*/${params.BRANCH_NAME}"]], //${params.BRANCH_NAME}
                                          userRemoteConfigs: [[url: "${params.REPO_URL}"]] //${params.REPO_URL}
                                ])
                            }
                        }
                        stage('SAST (Bandit)') {
                            agent {
                                docker {
                                    image 'python:3.10'
                                }
                            }
                            steps {
                                echo 'Preparing environment...'
                                sh 'pip install bandit'
                                sh 'python3 -m bandit -r .'
                            }
                        }
                        stage('SonarQube Analysis') {
                            steps {
                                script {
                                    def scannerHome = tool 'SonarScanner';
                                    def projectKey=test;
                                }
                                withSonarQubeEnv('SonarQube') {
                                    sh "'${scannerHome}/bin/sonar-scanner' -Dsonar.projectKey=${projectKey} -Dsonar.sources=."
                                }
                            }
                        }
                        stage('SCA (Dependency-Check)') {
                            steps {
                                script {
                                    dependencyCheck analysisMode: 'INCREMENTAL', 
                                                   project: 'MyProject', 
                                                   zipExtensions: '', 
                                                   failBuildOnCVSS: '7.0', 
                                                   active: true
                                }
                            }
                        }
                        stage('Deploy') {
                            steps {
                                echo 'Deploying...'
                            }
                        }
                    }
                }
            ''')
          }
        }
      }